package io.github.sdkei.hex.xy

import io.github.sdkei.hex.core.ApexH
import kotlin.math.sqrt

private val DISTANCE_BETWEEN_ADJACENT_HEXES: Double = 1.0
private val DISTANCE_BETWEEN_CENTER_AND_SIDE: Double = DISTANCE_BETWEEN_ADJACENT_HEXES / 2.0
private val DISTANCE_BETWEEN_OPPOSITE_SIDE = DISTANCE_BETWEEN_ADJACENT_HEXES
private val DISTANCE_BETWEEN_OPPOSITE_APEXES: Double = DISTANCE_BETWEEN_OPPOSITE_SIDE / sqrt(3.0) * 2.0
private val DISTANCE_BETWEEN_CENTER_AND_APEX: Double = DISTANCE_BETWEEN_OPPOSITE_APEXES / 2.0
private val DISTANCE_BETWEEN_APEXES: Double = DISTANCE_BETWEEN_OPPOSITE_SIDE / sqrt(3.0) * 1.0
private val DISTANCE_BETWEEN_MIDDLE_OF_SIDE_AND_APEX = DISTANCE_BETWEEN_APEXES / 2.0

fun ApexH.toPoint(): Point {
    return when (this) {
        ApexH._0 -> Point(0.0, -DISTANCE_BETWEEN_CENTER_AND_APEX)
        ApexH._2 -> Point(+DISTANCE_BETWEEN_CENTER_AND_SIDE, -DISTANCE_BETWEEN_MIDDLE_OF_SIDE_AND_APEX)
        ApexH._4 -> Point(+DISTANCE_BETWEEN_CENTER_AND_SIDE, +DISTANCE_BETWEEN_MIDDLE_OF_SIDE_AND_APEX)
        ApexH._6 -> Point(0.0, +DISTANCE_BETWEEN_CENTER_AND_APEX)
        ApexH._8 -> Point(-DISTANCE_BETWEEN_CENTER_AND_SIDE, +DISTANCE_BETWEEN_MIDDLE_OF_SIDE_AND_APEX)
        ApexH._10 -> Point(-DISTANCE_BETWEEN_CENTER_AND_SIDE, -DISTANCE_BETWEEN_MIDDLE_OF_SIDE_AND_APEX)
    }
}